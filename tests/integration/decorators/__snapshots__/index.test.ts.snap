// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`decorators default to 2022-03 1`] = `
"function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function(initializer) {
            assertNotFinished(decoratorFinishedRef, \\"addInitializer\\");
            assertCallable(initializer, \\"An initializer\\");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = \\"accessor\\";
                break;
            case 2:
                kindStr = \\"method\\";
                break;
            case 3:
                kindStr = \\"getter\\";
                break;
            case 4:
                kindStr = \\"setter\\";
                break;
            default:
                kindStr = \\"field\\";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? \\"#\\" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (0 === kind) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (2 === kind) get = function() {
            return desc.value;
        };
        else {
            if (1 === kind || 3 === kind) get = function() {
                return desc.get.call(this);
            };
            if (1 === kind || 4 === kind) set = function(v) {
                desc.set.call(this, v);
            };
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) throw new Error(\\"attempted to call \\" + fnName + \\" after decoration was finished\\");
    }
    function assertCallable(fn, hint) {
        if (\\"function\\" != typeof fn) throw new TypeError(hint + \\" must be a function\\");
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (1 === kind) {
            if (\\"object\\" !== type || null === value) throw new TypeError(\\"accessor decorators must return an object with get, set, or init properties or void 0\\");
            if (void 0 !== value.get) assertCallable(value.get, \\"accessor.get\\");
            if (void 0 !== value.set) assertCallable(value.set, \\"accessor.set\\");
            if (void 0 !== value.init) assertCallable(value.init, \\"accessor.init\\");
        } else if (\\"function\\" !== type) {
            var hint;
            hint = 0 === kind ? \\"field\\" : 10 === kind ? \\"class\\" : \\"method\\";
            throw new TypeError(hint + \\" decorators must return a function or void 0\\");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) desc = 0 === kind || 1 === kind ? {
            get: decInfo[3],
            set: decInfo[4]
        } : 3 === kind ? {
            get: decInfo[3]
        } : 4 === kind ? {
            set: decInfo[3]
        } : {
            value: decInfo[3]
        };
        else if (0 !== kind) desc = Object.getOwnPropertyDescriptor(base, name);
        if (1 === kind) value = {
            get: desc.get,
            set: desc.set
        };
        else if (2 === kind) value = desc.value;
        else if (3 === kind) value = desc.get;
        else if (4 === kind) value = desc.set;
        var newValue, get, set;
        if (\\"function\\" == typeof decs) {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (void 0 !== newValue) {
                assertValidReturnValue(kind, newValue);
                if (0 === kind) init = newValue;
                else if (1 === kind) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else value = newValue;
            }
        } else for(var i = decs.length - 1; i >= 0; i--){
            var dec = decs[i];
            newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (void 0 !== newValue) {
                assertValidReturnValue(kind, newValue);
                var newInit;
                if (0 === kind) newInit = newValue;
                else if (1 === kind) {
                    newInit = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else value = newValue;
                if (void 0 !== newInit) {
                    if (void 0 === init) init = newInit;
                    else if (\\"function\\" == typeof init) init = [
                        init,
                        newInit
                    ];
                    else init.push(newInit);
                }
            }
        }
        if (0 === kind || 1 === kind) {
            if (void 0 === init) init = function(instance, init) {
                return init;
            };
            else if (\\"function\\" != typeof init) {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++)value = ownInitializers[i].call(instance, value);
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (0 !== kind) {
            if (1 === kind) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (2 === kind) desc.value = value;
            else if (3 === kind) desc.get = value;
            else if (4 === kind) desc.set = value;
            if (isPrivate) {
                if (1 === kind) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (2 === kind) ret.push(value);
                else ret.push(function(instance, args) {
                    return value.call(instance, args);
                });
            } else Object.defineProperty(base, name, desc);
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!!Array.isArray(decInfo)) {
                var kind = decInfo[1];
                var name = decInfo[2];
                var isPrivate = decInfo.length > 3;
                var isStatic = kind >= 5;
                var base;
                var initializers;
                if (isStatic) {
                    base = Class;
                    kind -= 5;
                    staticInitializers = staticInitializers || [];
                    initializers = staticInitializers;
                } else {
                    base = Class.prototype;
                    protoInitializers = protoInitializers || [];
                    initializers = protoInitializers;
                }
                if (0 !== kind && !isPrivate) {
                    var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                    var existingKind = existingNonFields.get(name) || 0;
                    if (true === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error(\\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \\" + name);
                    if (!existingKind && kind > 2) existingNonFields.set(name, kind);
                    else existingNonFields.set(name, true);
                }
                applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
            }
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) ret.push(function(instance) {
            for(var i = 0; i < initializers.length; i++)initializers[i].call(instance);
            return instance;
        });
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: \\"class\\",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (void 0 !== nextNewClass) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++)initializers[i].call(newClass);
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\\"Symbol.metadata\\"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function(targetClass, memberDecs, classDecs, parentClass) {
        if (void 0 !== parentClass) var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\\"Symbol.metadata\\")];
        var metadata = Object.create(void 0 === parentMetadata ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var _dec, _initClass;
function src_enhancer(name) {
    return function(target) {
        target.prototype.name = name;
    };
}
let _Person;
_dec = src_enhancer('rslib');
class Person {
    static{
        ({ c: [_Person, _initClass] } = _apply_decs_2203_r(this, [], [
            _dec
        ]));
    }
    constructor(){
        this.version = '1.0.0';
    }
    version;
    static{
        _initClass();
    }
}
export { _Person as Person };
"
`;

exports[`decorators with experimentalDecorators in tsconfig 1`] = `
"function _ts_decorate(decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : null === desc ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if ("object" == typeof Reflect && "function" == typeof Reflect.decorate) r = Reflect.decorate(decorators, target, key, desc);
    else for(var i = decorators.length - 1; i >= 0; i--)if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function _ts_metadata(k, v) {
    if ("object" == typeof Reflect && "function" == typeof Reflect.metadata) return Reflect.metadata(k, v);
}
function src_enhancer(name) {
    return function(target) {
        target.prototype.name = name;
    };
}
class Person {
    constructor(){
        this.version = '1.0.0';
    }
}
Person = _ts_decorate([
    src_enhancer('rslib'),
    _ts_metadata("design:type", Function),
    _ts_metadata("design:paramtypes", [])
], Person);
export { Person };
"
`;

exports[`decorators with experimentalDecorators in tsconfig 2`] = `
"function applyDecs2203RFactory() {
    function createAddInitializerMethod(initializers, decoratorFinishedRef) {
        return function(initializer) {
            assertNotFinished(decoratorFinishedRef, \\"addInitializer\\");
            assertCallable(initializer, \\"An initializer\\");
            initializers.push(initializer);
        };
    }
    function memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value) {
        var kindStr;
        switch(kind){
            case 1:
                kindStr = \\"accessor\\";
                break;
            case 2:
                kindStr = \\"method\\";
                break;
            case 3:
                kindStr = \\"getter\\";
                break;
            case 4:
                kindStr = \\"setter\\";
                break;
            default:
                kindStr = \\"field\\";
        }
        var ctx = {
            kind: kindStr,
            name: isPrivate ? \\"#\\" + name : name,
            static: isStatic,
            private: isPrivate,
            metadata: metadata
        };
        var decoratorFinishedRef = {
            v: false
        };
        ctx.addInitializer = createAddInitializerMethod(initializers, decoratorFinishedRef);
        var get, set;
        if (0 === kind) {
            if (isPrivate) {
                get = desc.get;
                set = desc.set;
            } else {
                get = function() {
                    return this[name];
                };
                set = function(v) {
                    this[name] = v;
                };
            }
        } else if (2 === kind) get = function() {
            return desc.value;
        };
        else {
            if (1 === kind || 3 === kind) get = function() {
                return desc.get.call(this);
            };
            if (1 === kind || 4 === kind) set = function(v) {
                desc.set.call(this, v);
            };
        }
        ctx.access = get && set ? {
            get: get,
            set: set
        } : get ? {
            get: get
        } : {
            set: set
        };
        try {
            return dec(value, ctx);
        } finally{
            decoratorFinishedRef.v = true;
        }
    }
    function assertNotFinished(decoratorFinishedRef, fnName) {
        if (decoratorFinishedRef.v) throw new Error(\\"attempted to call \\" + fnName + \\" after decoration was finished\\");
    }
    function assertCallable(fn, hint) {
        if (\\"function\\" != typeof fn) throw new TypeError(hint + \\" must be a function\\");
    }
    function assertValidReturnValue(kind, value) {
        var type = typeof value;
        if (1 === kind) {
            if (\\"object\\" !== type || null === value) throw new TypeError(\\"accessor decorators must return an object with get, set, or init properties or void 0\\");
            if (void 0 !== value.get) assertCallable(value.get, \\"accessor.get\\");
            if (void 0 !== value.set) assertCallable(value.set, \\"accessor.set\\");
            if (void 0 !== value.init) assertCallable(value.init, \\"accessor.init\\");
        } else if (\\"function\\" !== type) {
            var hint;
            hint = 0 === kind ? \\"field\\" : 10 === kind ? \\"class\\" : \\"method\\";
            throw new TypeError(hint + \\" decorators must return a function or void 0\\");
        }
    }
    function applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata) {
        var decs = decInfo[0];
        var desc, init, value;
        if (isPrivate) desc = 0 === kind || 1 === kind ? {
            get: decInfo[3],
            set: decInfo[4]
        } : 3 === kind ? {
            get: decInfo[3]
        } : 4 === kind ? {
            set: decInfo[3]
        } : {
            value: decInfo[3]
        };
        else if (0 !== kind) desc = Object.getOwnPropertyDescriptor(base, name);
        if (1 === kind) value = {
            get: desc.get,
            set: desc.set
        };
        else if (2 === kind) value = desc.value;
        else if (3 === kind) value = desc.get;
        else if (4 === kind) value = desc.set;
        var newValue, get, set;
        if (\\"function\\" == typeof decs) {
            newValue = memberDec(decs, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (void 0 !== newValue) {
                assertValidReturnValue(kind, newValue);
                if (0 === kind) init = newValue;
                else if (1 === kind) {
                    init = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else value = newValue;
            }
        } else for(var i = decs.length - 1; i >= 0; i--){
            var dec = decs[i];
            newValue = memberDec(dec, name, desc, initializers, kind, isStatic, isPrivate, metadata, value);
            if (void 0 !== newValue) {
                assertValidReturnValue(kind, newValue);
                var newInit;
                if (0 === kind) newInit = newValue;
                else if (1 === kind) {
                    newInit = newValue.init;
                    get = newValue.get || value.get;
                    set = newValue.set || value.set;
                    value = {
                        get: get,
                        set: set
                    };
                } else value = newValue;
                if (void 0 !== newInit) {
                    if (void 0 === init) init = newInit;
                    else if (\\"function\\" == typeof init) init = [
                        init,
                        newInit
                    ];
                    else init.push(newInit);
                }
            }
        }
        if (0 === kind || 1 === kind) {
            if (void 0 === init) init = function(instance, init) {
                return init;
            };
            else if (\\"function\\" != typeof init) {
                var ownInitializers = init;
                init = function(instance, init) {
                    var value = init;
                    for(var i = 0; i < ownInitializers.length; i++)value = ownInitializers[i].call(instance, value);
                    return value;
                };
            } else {
                var originalInitializer = init;
                init = function(instance, init) {
                    return originalInitializer.call(instance, init);
                };
            }
            ret.push(init);
        }
        if (0 !== kind) {
            if (1 === kind) {
                desc.get = value.get;
                desc.set = value.set;
            } else if (2 === kind) desc.value = value;
            else if (3 === kind) desc.get = value;
            else if (4 === kind) desc.set = value;
            if (isPrivate) {
                if (1 === kind) {
                    ret.push(function(instance, args) {
                        return value.get.call(instance, args);
                    });
                    ret.push(function(instance, args) {
                        return value.set.call(instance, args);
                    });
                } else if (2 === kind) ret.push(value);
                else ret.push(function(instance, args) {
                    return value.call(instance, args);
                });
            } else Object.defineProperty(base, name, desc);
        }
    }
    function applyMemberDecs(Class, decInfos, metadata) {
        var ret = [];
        var protoInitializers;
        var staticInitializers;
        var existingProtoNonFields = new Map();
        var existingStaticNonFields = new Map();
        for(var i = 0; i < decInfos.length; i++){
            var decInfo = decInfos[i];
            if (!!Array.isArray(decInfo)) {
                var kind = decInfo[1];
                var name = decInfo[2];
                var isPrivate = decInfo.length > 3;
                var isStatic = kind >= 5;
                var base;
                var initializers;
                if (isStatic) {
                    base = Class;
                    kind -= 5;
                    staticInitializers = staticInitializers || [];
                    initializers = staticInitializers;
                } else {
                    base = Class.prototype;
                    protoInitializers = protoInitializers || [];
                    initializers = protoInitializers;
                }
                if (0 !== kind && !isPrivate) {
                    var existingNonFields = isStatic ? existingStaticNonFields : existingProtoNonFields;
                    var existingKind = existingNonFields.get(name) || 0;
                    if (true === existingKind || 3 === existingKind && 4 !== kind || 4 === existingKind && 3 !== kind) throw new Error(\\"Attempted to decorate a public method/accessor that has the same name as a previously decorated public method/accessor. This is not currently supported by the decorators plugin. Property name was: \\" + name);
                    if (!existingKind && kind > 2) existingNonFields.set(name, kind);
                    else existingNonFields.set(name, true);
                }
                applyMemberDec(ret, base, decInfo, name, kind, isStatic, isPrivate, initializers, metadata);
            }
        }
        pushInitializers(ret, protoInitializers);
        pushInitializers(ret, staticInitializers);
        return ret;
    }
    function pushInitializers(ret, initializers) {
        if (initializers) ret.push(function(instance) {
            for(var i = 0; i < initializers.length; i++)initializers[i].call(instance);
            return instance;
        });
    }
    function applyClassDecs(targetClass, classDecs, metadata) {
        if (classDecs.length > 0) {
            var initializers = [];
            var newClass = targetClass;
            var name = targetClass.name;
            for(var i = classDecs.length - 1; i >= 0; i--){
                var decoratorFinishedRef = {
                    v: false
                };
                try {
                    var nextNewClass = classDecs[i](newClass, {
                        kind: \\"class\\",
                        name: name,
                        addInitializer: createAddInitializerMethod(initializers, decoratorFinishedRef),
                        metadata
                    });
                } finally{
                    decoratorFinishedRef.v = true;
                }
                if (void 0 !== nextNewClass) {
                    assertValidReturnValue(10, nextNewClass);
                    newClass = nextNewClass;
                }
            }
            return [
                defineMetadata(newClass, metadata),
                function() {
                    for(var i = 0; i < initializers.length; i++)initializers[i].call(newClass);
                }
            ];
        }
    }
    function defineMetadata(Class, metadata) {
        return Object.defineProperty(Class, Symbol.metadata || Symbol.for(\\"Symbol.metadata\\"), {
            configurable: true,
            enumerable: true,
            value: metadata
        });
    }
    return function(targetClass, memberDecs, classDecs, parentClass) {
        if (void 0 !== parentClass) var parentMetadata = parentClass[Symbol.metadata || Symbol.for(\\"Symbol.metadata\\")];
        var metadata = Object.create(void 0 === parentMetadata ? null : parentMetadata);
        var e = applyMemberDecs(targetClass, memberDecs, metadata);
        if (!classDecs.length) defineMetadata(targetClass, metadata);
        return {
            e: e,
            get c () {
                return applyClassDecs(targetClass, classDecs, metadata);
            }
        };
    };
}
function _apply_decs_2203_r(targetClass, memberDecs, classDecs, parentClass) {
    return (_apply_decs_2203_r = applyDecs2203RFactory())(targetClass, memberDecs, classDecs, parentClass);
}
var _dec, _initClass;
function src_enhancer(name) {
    return function(target) {
        target.prototype.name = name;
    };
}
let _Person;
_dec = src_enhancer('rslib');
class Person {
    static{
        ({ c: [_Person, _initClass] } = _apply_decs_2203_r(this, [], [
            _dec
        ]));
    }
    constructor(){
        this.version = '1.0.0';
    }
    version;
    static{
        _initClass();
    }
}
export { _Person as Person };
"
`;
